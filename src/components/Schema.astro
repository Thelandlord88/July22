---
// Phase 1: Core Structured Data Refinement
// This frontmatter executes on the server at build time.

import { generateSchema } from '../utils/schema.js';
import suburbs from '../data/suburbs.json';

// 1. Set a default preferred suburb. This ensures a valid schema is always ready for SSR.
const preferredSuburb = "Redbank Plains"; // Or any other sensible default

// 2. Find the data for the default suburb.
const initialSuburbData = suburbs.find(s => s.name === preferredSuburb) || {
  name: preferredSuburb,
  coords: {},
  postcode: '',
  landmarks: []
};

// 3. Generate the initial, server-rendered schema. This is critical for crawlers.
const initialSchema = generateSchema(initialSuburbData, suburbs);
---

<script type="application/ld+json" set:html={initialSchema} id="dynamic-schema"></script>

<script>
  /**
   * Listens for the 'astro:page-load' event, which fires on initial page view
   * and every subsequent page navigation. This is the correct Astro lifecycle event for this task.
   */
  document.addEventListener('astro:page-load', () => {
    // Dynamically import the schemaManager only when the page is ready.
    // This is called "code-splitting" and is excellent for performance.
    import('../utils/schemaManager.js').then(({ initializeSchema }) => {
      initializeSchema();
    });
  });

  /**
   * Listens for a custom 'suburbChanged' event.
   * This allows other components on the page to trigger a schema update
   * without being tightly coupled to this one.
   */
  document.addEventListener('suburbChanged', (e) => {
    // We only import and run the update function when a suburb actually changes.
    import('../utils/schemaManager.js').then(({ updateSchemaForSuburb }) => {
      // The new suburb name is passed in the event's 'detail' object.
      updateSchemaForSuburb(e.detail.name);
    });
  });
</script>