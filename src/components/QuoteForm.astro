---
/**
 * QuoteForm.astro â€“ Multiâ€‘step quote request form
 * ------------------------------------------------
 * â€¢ Starts progress bar at 25â€¯% (step / totalSteps)
 * â€¢ Keyboardâ€‘accessible addâ€‘on cards (uses :has & JS fallback)
 * â€¢ Netlifyâ€‘compatible async submission with offline retry
 * â€¢ Strict AU phone validation
 * â€¢ Smooth reset scroll + focus safetyâ€‘net
 * â€¢ Clear comment markers so you can extend â€‘â€‘ e.g. STEPÂ 2 addâ€‘on list
 */
---
<section id="quote" class="py-20 md:py-28 bg-gradient-to-br from-light-sky to-sky-200">
  <div class="max-w-4xl mx-auto bg-white rounded-2xl shadow-xl overflow-hidden">
    <!-- â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ FORM AREA â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ -->
    <div id="form-area">
      <!-- Header + Progress bar -->
      <div class="p-6 md:p-8">
        <h2 class="text-3xl md:text-4xl font-extrabold text-deep-navy text-center mb-4">
          Get Your Guaranteed Quote
        </h2>
        <p class="text-center text-gray-600 mb-8">
          Fill in the details below for a transparent, noâ€‘surprise price.
        </p>
        <div class="progress-bar mb-2">
          <div id="progress" class="progress-fill" style="width:0%"></div>
        </div>
        <div class="text-sm text-slate-500 text-right">
          Step <span id="current-step-display">1</span> of 4
        </div>
      </div>

      <!-- Step indicators (desktop visual guide) -->
      <div class="step-indicator px-8 py-4">
        <div class="step active" data-step="1"><div class="step-number">1</div><div class="step-label">Property</div></div>
        <div class="step" data-step="2"><div class="step-number">2</div><div class="step-label">Addâ€‘ons</div></div>
        <div class="step" data-step="3"><div class="step-number">3</div><div class="step-label">Your Info</div></div>
        <div class="step" data-step="4"><div class="step-number">4</div><div class="step-label">Review</div></div>
      </div>

      <!-- Inline form submission error (shown if fetch fails) -->
      <div id="form-submission-error" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg relative mx-6 md:mx-8 mt-4" role="alert">
        <strong class="font-bold">Submission failed.</strong>
        <span id="form-submission-error-msg" class="block sm:inline"></span>
      </div>

      <!-- â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ FORM START â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ -->
      <div class="px-6 md:px-8 pb-8">
        <form id="quote-form"
              name="quote-request"
              method="POST"
              data-netlify="true"
              netlify-honeypot="bot-field"
              novalidate>
          <!-- Netlify spam trap -->
          <p class="hidden"><label>Donâ€™t fill this out if youâ€™re human: <input name="bot-field"></label></p>

          <!-- â”€â”€â”€â”€â”€â”€â”€ STEPÂ 1: Property details â”€â”€â”€â”€â”€â”€â”€ -->
          <div id="step-1" class="form-step active">
            <h3 class="text-2xl font-bold text-deep-navy mb-6">About Your Property</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label for="property-type" class="block text-slate-700 font-medium mb-2">Property Type</label>
                <select id="property-type" name="property-type" required aria-describedby="property-type-error-msg"
                        class="w-full p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-fresh-sky">
                  <option value="">Select.</option>
                  <option>House</option><option>Apartment</option><option>Townhouse</option>
                </select>
                <p id="property-type-error-msg" class="error-message" hidden>Please select a property type.</p>
              </div>
              <div>
                <label for="bedrooms" class="block text-slate-700 font-medium mb-2">Bedrooms</label>
                <select id="bedrooms" name="bedrooms" class="w-full p-3 border border-slate-300 rounded-lg">
                  <option>1</option><option>2</option><option selected>3</option><option>4</option>
                </select>
              </div>
              <div class="md:col-span-2">
                <label for="bathrooms" class="block text-slate-700 font-medium mb-2">Bathrooms</label>
                <select id="bathrooms" name="bathrooms" class="w-full p-3 border border-slate-300 rounded-lg">
                  <option>1</option><option selected>2</option><option>3</option>
                </select>
              </div>
            </div>
            <div class="flex justify-end mt-8">
              <button type="button" class="next-step bg-sky-700 hover:bg-sky-900 text-white font-bold py-3 px-6 rounded-lg focus-visible:ring-4 focus-visible:ring-sky-300">
                Next <i class="fas fa-arrow-right ml-2" aria-hidden="true"></i>
              </button>
            </div>
          </div>

          <!-- â”€â”€â”€â”€â”€â”€â”€ STEPÂ 2: Addâ€‘ons â”€â”€â”€â”€â”€â”€â”€ -->
          <div id="step-2" class="form-step">
            <h3 class="text-2xl font-bold text-deep-navy mb-6">Customise Your Clean</h3>
            <!-- TODO: ðŸ”§ Add more selectable cards here as the business scales -->
            <div class="space-y-4">
              <label class="form-checkbox-label flex items-center p-4 border border-gray-300 rounded-lg hover:bg-light-sky transition cursor-pointer">
                <input type="checkbox" name="addons" value="Interior Wall Wash" class="h-5 w-5 text-fresh-sky">
                <span class="ml-4 font-medium">Interior Wall Wash</span>
              </label>
              <label class="form-checkbox-label flex items-center p-4 border border-gray-300 rounded-lg hover:bg-light-sky transition cursor-pointer">
                <input type="checkbox" name="addons" value="Carpet Steam Clean" class="h-5 w-5 text-fresh-sky">
                <span class="ml-4 font-medium">Carpet Steam Clean</span>
              </label>
            </div>
            <div class="flex justify-between mt-8">
              <button type="button" class="prev-step bg-slate-300 hover:bg-slate-400 text-slate-700 font-bold py-3 px-6 rounded-lg focus-visible:ring-4 focus-visible:ring-slate-400">
                <i class="fas fa-arrow-left mr-2" aria-hidden="true"></i> Back
              </button>
              <button type="button" class="next-step bg-sky-700 hover:bg-sky-900 text-white font-bold py-3 px-6 rounded-lg focus-visible:ring-4 focus-visible:ring-sky-300">
                Next <i class="fas fa-arrow-right ml-2" aria-hidden="true"></i>
              </button>
            </div>
          </div>

          <!-- â”€â”€â”€â”€â”€â”€â”€ STEPÂ 3: Contact info â”€â”€â”€â”€â”€â”€â”€ -->
          <div id="step-3" class="form-step">
            <h3 class="text-2xl font-bold text-deep-navy mb-6">Your Information</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label for="full-name" class="block text-slate-700 font-medium mb-2">Full Name</label>
                <input id="full-name" name="full-name" type="text" required placeholder="John Doe"
                       class="w-full p-3 border border-slate-300 rounded-lg" aria-describedby="full-name-error-msg">
                <p id="full-name-error-msg" class="error-message" hidden>Please enter your full name.</p>
              </div>
              <div>
                <label for="phone" class="block text-slate-700 font-medium mb-2">Phone Number</label>
                <input id="phone" name="phone" type="tel" required placeholder="0412Â 345Â 678"
                       class="w-full p-3 border border-slate-300 rounded-lg" aria-describedby="phone-error-msg">
                <p id="phone-error-msg" class="error-message" hidden>Please enter a valid Australian phone number.</p>
              </div>
              <div class="md:col-span-2">
                <label for="email" class="block text-slate-700 font-medium mb-2">Email Address</label>
                <input id="email" name="email" type="email" required placeholder="you@email.com"
                       class="w-full p-3 border border-slate-300 rounded-lg" aria-describedby="email-error-msg">
                <p id="email-error-msg" class="error-message" hidden>Please enter a valid email address.</p>
              </div>
            </div>
            <div class="flex justify-between mt-8">
              <button type="button" class="prev-step bg-slate-300 hover:bg-slate-400 text-slate-700 font-bold py-3 px-6 rounded-lg focus-visible:ring-4 focus-visible:ring-slate-400">
                <i class="fas fa-arrow-left mr-2" aria-hidden="true"></i> Back
              </button>
              <button type="button" class="next-step bg-sky-700 hover:bg-sky-900 text-white font-bold py-3 px-6 rounded-lg focus-visible:ring-4 focus-visible:ring-sky-300">
                Next <i class="fas fa-arrow-right ml-2" aria-hidden="true"></i>
              </button>
            </div>
          </div>

          <!-- â”€â”€â”€â”€â”€â”€â”€ STEPÂ 4: Review & Submit â”€â”€â”€â”€â”€â”€â”€ -->
          <div id="step-4" class="form-step">
            <h3 class="text-2xl font-bold text-deep-navy mb-6">Review Your Request</h3>
            <div class="bg-slate-50 rounded-xl p-6 mb-6 space-y-3">
              <div class="flex justify-between items-center">
                <span class="text-slate-600">Property:</span>
                <span id="review-property-summary" class="font-bold text-right text-deep-navy">-</span>
              </div>
              <div>
                <span class="text-slate-600">Services:</span>
                <ul id="review-services" class="font-bold mt-2 list-disc list-inside text-fresh-sky"></ul>
              </div>
            </div>
            <div class="flex justify-between mt-8">
              <button type="button" class="prev-step bg-slate-300 hover:bg-slate-400 text-slate-700 font-bold py-3 px-6 rounded-lg focus-visible:ring-4 focus-visible:ring-slate-400">
                <i class="fas fa-arrow-left mr-2" aria-hidden="true"></i> Back
              </button>
              <button type="submit" id="submit-btn" class="bg-green-700 hover:bg-green-800 text-white font-extrabold py-3 px-8 rounded-lg focus-visible:ring-4 focus-visible:ring-green-300 disabled:opacity-50 disabled:cursor-wait">
                <span class="submit-text">Submit Quote Request</span>
                <span class="loading-spinner hidden"><svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"/><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"/></svg> Submittingâ€¦</span>
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>

    <!-- â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ SUCCESS AREA â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ -->
    <div id="success-message" class="hidden text-center py-20 px-4">
      <div class="w-24 h-24 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6 ring-4 ring-white shadow-lg">
        <i class="fas fa-check-circle text-green-700 text-5xl" aria-hidden="true"></i>
      </div>
      <h2 class="text-3xl font-bold text-deep-navy mb-4">Success! Weâ€™ll be in touch.</h2>
      <button id="new-quote-btn" class="bg-sky-700 hover:bg-sky-900 text-white font-bold py-3 px-8 rounded-lg focus-visible:ring-4 focus-visible:ring-sky-300">
        Request Another Quote
      </button>
    </div>
  </div>
</section>

<script lang="ts">
  /* --------------------------- STATE TYPES ---------------------------- */
  interface QuoteFormState {
    currentStep: number;
    propertyType: string;
    bedrooms: string;
    bathrooms: string;
    addons: string[];
    fullName: string;
    phone: string;
    email: string;
  }

  /* --------------------------- INIT HANDLER --------------------------- */
  function initQuoteForm() {
    const form = document.getElementById('quote-form') as HTMLFormElement | null;
    if (!form || form.dataset.initialized === 'true') return;
    form.dataset.initialized = 'true';

    /* DOMÂ refs */
    const formArea           = document.getElementById('form-area');
    const successArea        = document.getElementById('success-message');
    const formSteps          = Array.from(form.querySelectorAll<HTMLElement>('.form-step'));
    const indicators         = Array.from(document.querySelectorAll<HTMLElement>('.step-indicator .step'));
    const progressFill       = document.getElementById('progress') as HTMLElement;
    const stepDisplay        = document.getElementById('current-step-display');
    const newQuoteBtn        = document.getElementById('new-quote-btn');
    const submitBtn          = document.getElementById('submit-btn') as HTMLButtonElement;
    const errorBanner        = document.getElementById('form-submission-error');

    /* Initial state (defaults align with markup) */
    const initialState: QuoteFormState = {
      currentStep : 1,
      propertyType: (form.querySelector('#property-type') as HTMLSelectElement).value || '',
      bedrooms    : (form.querySelector('#bedrooms') as HTMLSelectElement).value || '3',
      bathrooms   : (form.querySelector('#bathrooms') as HTMLSelectElement).value || '2',
      addons      : [],
      fullName    : '',
      phone       : '',
      email       : ''
    };
    let state: QuoteFormState = { ...initialState };

    /* ---------- Helper: UI Render ---------- */
    const renderUI = () => {
      // progress bar width (current / total)
      progressFill.style.width = `${(state.currentStep / formSteps.length) * 100}%`;
      stepDisplay!.textContent = String(state.currentStep);

      indicators.forEach((el, i) => {
        el.classList.toggle('active',   i + 1 === state.currentStep);
        el.classList.toggle('completed', i + 1 <  state.currentStep);
      });
      formSteps.forEach((el, i) => el.classList.toggle('active', i + 1 === state.currentStep));

      if (state.currentStep === 4) {
        // summary content
        (document.getElementById('review-property-summary')!).textContent = `${state.bedrooms}Â Bed, ${state.bathrooms}Â Bath ${state.propertyType || 'Property'}`;
        const list = document.getElementById('review-services')!;
        list.innerHTML = '<li>Standard Bond Clean</li>';
        state.addons.forEach(a => list.insertAdjacentHTML('beforeend', `<li>${a}</li>`));
      }
    };

    /* ---------- Helper: validation ---------- */
    const toggleInvalid = (input: HTMLElement, isValid: boolean) => {
      const msg = document.getElementById(input.getAttribute('aria-describedby')!);
      input.classList.toggle('invalid', !isValid);
      input.setAttribute('aria-invalid', String(!isValid));
      if (msg) msg.hidden = isValid;
    };

    const validateStep = (step: number): boolean => {
      let ok = true;
      if (step === 1) {
        const sel = form.querySelector('#property-type') as HTMLSelectElement;
        ok = sel.value.trim() !== '';
        toggleInvalid(sel, ok);
      } else if (step === 3) {
        const name = form.querySelector('#full-name') as HTMLInputElement;
        const phone = form.querySelector('#phone') as HTMLInputElement;
        const email = form.querySelector('#email') as HTMLInputElement;
        const phoneRE = /^(?:\+?61\s?)?(?:\(?0?[2-578]\)?\s?\d{4}\s?\d{4})$/; // AU format
        const emailRE = /^\S+@\S+\.\S+$/;
        const nameOk = name.value.trim() !== '';
        const phoneOk = phoneRE.test(phone.value);
        const emailOk = emailRE.test(email.value);
        toggleInvalid(name, nameOk);
        toggleInvalid(phone, phoneOk);
        toggleInvalid(email, emailOk);
        ok = nameOk && phoneOk && emailOk;
      }
      return ok;
    };

    /* ---------- Helper: focus ---------- */
    const focusFirst = () => {
      const stepEl = formSteps[state.currentStep - 1];
      stepEl.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
      const firstInput = stepEl.querySelector<HTMLElement>('input, select, textarea');
      if (firstInput) {
        firstInput.focus({ preventScroll: true });
      } else {
        stepEl.querySelector<HTMLElement>('.next-step, .prev-step')?.focus({ preventScroll: true });
      }
    };

    /* ---------- Form submission ---------- */
    const savePending = () => {
      localStorage.setItem('pendingQuoteSubmission', JSON.stringify(state));
      if (errorBanner) {
        (document.getElementById('form-submission-error-msg')!).textContent = `We couldn't submit your quote, but we've saved your progress. We'll try again automatically when you're back online.`;
        errorBanner.classList.remove('hidden');
      }
    };

    const submitForm = async () => {
      if (submitBtn) {
        submitBtn.disabled = true;
        submitBtn.querySelector('.submit-text')!.classList.add('hidden');
        submitBtn.querySelector('.loading-spinner')!.classList.remove('hidden');
      }
      errorBanner?.classList.add('hidden');

      const body = new URLSearchParams();
      body.append('form-name', 'quote-request');
      body.append('propertyType', state.propertyType);
      body.append('bedrooms', state.bedrooms);
      body.append('bathrooms', state.bathrooms);
      body.append('fullName', state.fullName);
      body.append('phone', state.phone);
      body.append('email', state.email);
      state.addons.forEach(a => body.append('addons[]', a));

      try {
        const res = await fetch('/', {
          method : 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body   : body.toString()
        });
        if (!res.ok) throw new Error(`Server responded with ${res.status}`);
        formArea?.classList.add('hidden');
        successArea?.classList.remove('hidden');
        localStorage.removeItem('pendingQuoteSubmission');
      } catch (err) {
        console.error('form submit error', err);
        savePending();
      } finally {
        if (submitBtn) {
          submitBtn.disabled = false;
          submitBtn.querySelector('.submit-text')!.classList.remove('hidden');
          submitBtn.querySelector('.loading-spinner')!.classList.add('hidden');
        }
      }
    };

    /* ---------- LOCAL EVENT HANDLERS ---------- */

    // Keep state in sync with inputs
    form.addEventListener('input', e => {
      const t = e.target as HTMLInputElement;
      switch (t.name) {
        case 'property-type': state.propertyType = t.value; break;
        case 'bedrooms'     : state.bedrooms     = t.value; break;
        case 'bathrooms'    : state.bathrooms    = t.value; break;
        case 'full-name'    : state.fullName     = t.value; break;
        case 'phone'        : state.phone        = t.value; break;
        case 'email'        : state.email        = t.value; break;
        case 'addons':
          state.addons = Array.from(form.querySelectorAll<HTMLInputElement>('input[name="addons"]:checked')).map(c => c.value);
          break;
      }
    });

    // Clickâ€‘based navigation & checkbox card highlight (mouse users)
    form.addEventListener('click', e => {
      const tgt = e.target as HTMLElement;
      if (tgt.closest('.next-step')) {
        if (validateStep(state.currentStep)) {
          state.currentStep++;
          renderUI();
          focusFirst();
        }
      } else if (tgt.closest('.prev-step')) {
        state.currentStep--;
        renderUI();
        focusFirst();
      } else if (tgt.closest('.form-checkbox-label')) {
        const label = tgt.closest('.form-checkbox-label') as HTMLLabelElement;
        const cb = label.querySelector<HTMLInputElement>('input[type="checkbox"]')!;
        label.classList.toggle('selected', cb.checked);
      }
    });

    // Keyboard / screenâ€‘reader change event ensures card highlight syncs
    form.addEventListener('change', e => {
      const cb = (e.target as HTMLElement).closest<HTMLInputElement>('input[name="addons"]');
      if (cb) {
        cb.parentElement!.classList.toggle('selected', cb.checked);
      }
    });

    // Submit handler (prevent default and validate steps 1 & 3)
    form.addEventListener('submit', e => {
      e.preventDefault();
      if (validateStep(1) && validateStep(3)) submitForm();
    });

    // Reset handler (request another quote)
    newQuoteBtn?.addEventListener('click', () => form.reset());
    form.addEventListener('reset', () => {
      state = { ...initialState };
      renderUI();
      form.querySelectorAll('.invalid').forEach(el => el.classList.remove('invalid'));
      form.querySelectorAll('[aria-invalid]').forEach(el => el.setAttribute('aria-invalid', 'false'));
      form.querySelectorAll('.error-message').forEach(el => (el as HTMLElement).hidden = true);
      form.querySelectorAll('.form-checkbox-label.selected').forEach(el => el.classList.remove('selected'));
      formArea?.classList.remove('hidden');
      successArea?.classList.add('hidden');
      form.scrollIntoView({ behavior: 'smooth' });
    });

    // Offline retry handling
    const pending = localStorage.getItem('pendingQuoteSubmission');
    if (pending) {
      try {
        state = JSON.parse(pending);
        if (navigator.onLine) submitForm();
      } catch { localStorage.removeItem('pendingQuoteSubmission'); }
    }
    window.addEventListener('online', () => {
      if (localStorage.getItem('pendingQuoteSubmission')) submitForm();
    });

    // Initial paint
    renderUI();
  }

  document.addEventListener('astro:page-load', initQuoteForm);
  document.addEventListener('astro:after-swap', initQuoteForm);
</script>

<style>
  /* Basic transitions + states (you can migrate to Tailwind directive if preferred) */
  .form-step{display:none}
  .form-step.active{display:block;animation:fadeIn .5s ease-in-out}
  @keyframes fadeIn{from{opacity:0;transform:translateY(10px)}to{opacity:1;transform:translateY(0)}}

  .progress-bar{background:#e5e7eb;border-radius:9999px;overflow:hidden}
  .progress-fill{background:#0ea5e9;height:0.5rem;border-radius:9999px;transition:width .4s ease-in-out}

  .error-message{color:#ef4444;font-size:0.875rem;margin-top:0.5rem}
  input.invalid,select.invalid{border-color:#ef4444;--tw-ring-color:#ef4444}

  .form-checkbox-label{transition:border .2s ease,background .2s ease}
  .form-checkbox-label.selected{border-color:#0ea5e9;background:#f0f9ff;--tw-ring-color:#0ea5e9}
  /* CSSâ€‘only fallback for modern browsers */
  .form-checkbox-label:has(input:checked){border-color:#0ea5e9;background:#f0f9ff}

  .step-indicator{display:flex;justify-content:space-between;border-top:1px solid #e5e7eb;border-bottom:1px solid #e5e7eb}
  .step{display:flex;align-items:center;padding:0.5rem 1rem;color:#6b7280;flex-grow:1;justify-content:center}
  .step .step-number{width:2rem;height:2rem;border-radius:50%;border:2px solid #d1d5db;display:flex;align-items:center;justify-content:center;font-weight:700;transition:all .3s}
  .step .step-label{display:none}
  @media(min-width:768px){.step .step-label{display:block;margin-left:0.75rem;font-weight:500}}
  .step.active .step-number{border-color:#0ea5e9;background:#0ea5e9;color:#fff}
  .step.active{color:#0f172a;font-weight:700}
  .step.completed .step-number{border-color:#16a34a;background:#16a34a;color:#fff}

  .loading-spinner.hidden,.submit-text.hidden{display:none}
</style>
